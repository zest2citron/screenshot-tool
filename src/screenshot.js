const { chromium } = require('playwright');
const fs = require('fs');
const path = require('path');

/**
 * Captures a screenshot of a web page
 * @param {string} url - URL of the page to capture
 * @param {Object} options - Configuration options
 * @param {string} options.outputPath - Path where to save the screenshot
 * @param {string} options.outputFilename - Screenshot filename
 * @param {boolean} options.fullPage - Capture the entire page or just the visible part
 * @param {boolean} options.generateMarkdown - Generate a Markdown file with the embedded image
 * @param {string} options.markdownTitle - Title of the Markdown file
 * @returns {Promise<Object>} - Information about the screenshot
 */
async function captureScreenshot(url, options = {}) {
  // Default options
  const defaultOptions = {
    outputPath: process.cwd(),
    outputFilename: 'screenshot.png',
    fullPage: true,
    generateMarkdown: true,
    markdownTitle: 'Automatic Screenshot',
    waitForSelector: null,
    waitForTimeout: 1000
  };

  // Merge default options with provided options
  const config = { ...defaultOptions, ...options };
  
  // Full paths for output files
  const screenshotPath = path.join(config.outputPath, config.outputFilename);
  const markdownPath = config.markdownPath || path.join(config.outputPath, 'screenshot_to_share.md');
  
  // Launch the browser
  const browser = await chromium.launch();
  
  try {
    // Create a new browser context
    const context = await browser.newContext();
    
    // Open a new page
    const page = await context.newPage();
    
    // Navigate to the specified URL
    await page.goto(url);
    
    // Wait for the page to be fully loaded
    await page.waitForLoadState('networkidle');
    
    // Wait for a specific selector if requested
    if (config.waitForSelector) {
      await page.waitForSelector(config.waitForSelector);
    }
    
    // Wait for an additional delay if specified
    if (config.waitForTimeout > 0) {
      await page.waitForTimeout(config.waitForTimeout);
    }
    
    // Take a screenshot
    await page.screenshot({ 
      path: screenshotPath, 
      fullPage: config.fullPage 
    });
    
    console.log(`Screenshot saved to ${screenshotPath}`);
    
    // Generate a Markdown file if requested
    let markdownFilePath = null;
    if (config.generateMarkdown) {
      // Convert the image to Base64
      const imageBuffer = fs.readFileSync(screenshotPath);
      const base64Image = imageBuffer.toString('base64');
      
      // Create a Markdown file with the embedded image
      const markdownContent = `# ${config.markdownTitle}
      
Date: ${new Date().toLocaleString()}

![Screenshot of the web page](data:image/png;base64,${base64Image})

*This image was automatically generated by the screenshot tool*
`;
      
      fs.writeFileSync(markdownPath, markdownContent);
      console.log(`Markdown file created with embedded image: ${markdownPath}`);
      markdownFilePath = markdownPath;
    }
    
    return {
      success: true,
      screenshotPath,
      markdownPath: markdownFilePath,
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    console.error('Error while capturing screenshot:', error);
    return {
      success: false,
      error: error.message
    };
  } finally {
    // Close the browser
    await browser.close();
  }
}

module.exports = { captureScreenshot };
